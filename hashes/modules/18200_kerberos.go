package modules

import (
	"fmt"
	"strings"

	"github.com/tankbusta/hashvalidate/hashes"
	"github.com/tankbusta/hashvalidate/tokenizer"
)

type kerberos_18200 struct{}

func init() {
	hashes.Register(18200, kerberos_18200{})
}

func (s kerberos_18200) Name() string { return "Kerberos 5, etype 23, AS-REP" }

func (s kerberos_18200) Example() string {
	return "$krb5asrep$23$user@domain.com:3e156ada591263b8aab0965f5aebd837$007497cb51b6c8116d6407a782ea0e1c5402b17db7afa6b05a6d30ed164a9933c754d720e279c6c573679bd27128fe77e5fea1f72334c1193c8ff0b370fadc6368bf2d49bbfdba4c5dccab95e8c8ebfdc75f438a0797dbfb2f8a1a5f4c423f9bfc1fea483342a11bd56a216f4d5158ccc4b224b52894fadfba3957dfe4b6b8f5f9f9fe422811a314768673e0c924340b8ccb84775ce9defaa3baa0910b676ad0036d13032b0dd94e3b13903cc738a7b6d00b0b3c210d1f972a6c7cae9bd3c959acf7565be528fc179118f28c679f6deeee1456f0781eb8154e18e49cb27b64bf74cd7112a0ebae2102ac"
}

func (s kerberos_18200) Type() int { return 18200 }

func (s kerberos_18200) Tokens() []tokenizer.Token {
	// The rest of this is generated by GenerateTokens based on the incoming hash
	return []tokenizer.Token{
		{
			Length:     14,
			Attributes: tokenizer.FixedLength | tokenizer.VerifySignature,
			Signatures: []tokenizer.Signature{
				{
					Expected: "$krb5asrep$23$",
				},
			},
		},
	}
}

func (s kerberos_18200) GenerateTokens(input string, parent []tokenizer.Token) ([]tokenizer.Token, error) {
	hashlen := len(input)

	if hashlen < 16 {
		return nil, fmt.Errorf("Kerberos 18200: hash length of at least 16 expected got %d", hashlen)
	}

	// Bounds check
	_ = input[16]

	upnInfoEnd := strings.Index(input[14:], ":")
	if upnInfoEnd == -1 {
		return nil, fmt.Errorf("Kerberos 18200: could not locate end separator of upn information")
	}

	return append(
		parent,
		[]tokenizer.Token{
			{
				Length:     upnInfoEnd + 1, // We want the : here
				Attributes: tokenizer.FixedLength,
			},
			{
				Separator:  "$",
				LengthMin:  32,
				LengthMax:  32,
				Attributes: tokenizer.VerifyLength | tokenizer.VerifyHex,
			},
			{
				Separator:  "$",
				LengthMin:  64,
				LengthMax:  40960,
				Attributes: tokenizer.VerifyLength | tokenizer.VerifyHex,
			},
		}...,
	), nil
}
