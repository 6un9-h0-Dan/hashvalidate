package modules

import (
	"fmt"
	"strings"

	"github.com/tankbusta/hashvalidate/hashes"
	"github.com/tankbusta/hashvalidate/tokenizer"
)

type kerberos_13100 struct{}

func init() {
	hashes.Register(13100, kerberos_13100{})
}

func (s kerberos_13100) Name() string { return "Kerberos 5, etype 23, TGS-REP" }

func (s kerberos_13100) Example() string {
	return "$krb5tgs$23$*user$realm$test/spn*$b548e10f5694ae018d7ad63c257af7dc$35e8e45658860bc31a859b41a08989265f4ef8afd75652ab4d7a30ef151bf6350d879ae189a8cb769e01fa573c6315232b37e4bcad9105520640a781e5fd85c09615e78267e494f433f067cc6958200a82f70627ce0eebc2ac445729c2a8a0255dc3ede2c4973d2d93ac8c1a56b26444df300cb93045d05ff2326affaa3ae97f5cd866c14b78a459f0933a550e0b6507bf8af27c2391ef69fbdd649dd059a4b9ae2440edd96c82479645ccdb06bae0eead3b7f639178a90cf24d9a"
}

func (s kerberos_13100) Type() int { return 13100 }

func (s kerberos_13100) Tokens() []tokenizer.Token {
	// The rest of this is generated by GenerateTokens based on the incoming hash
	return []tokenizer.Token{
		{
			Length:     12,
			Attributes: tokenizer.FixedLength | tokenizer.VerifySignature,
			Signatures: []tokenizer.Signature{
				{
					Expected: "$krb5tgs$23$",
				},
			},
		},
	}
}

func (s kerberos_13100) GenerateTokens(input string, parent []tokenizer.Token) ([]tokenizer.Token, error) {
	hashlen := len(input)

	if hashlen < 16 {
		return nil, fmt.Errorf("Kerberos 13100: hash length of at least 16 expected got %d", hashlen)
	}

	// Bounds check
	_ = input[16]

	// Hash has user information
	if input[12] == '*' {
		infoEnd := strings.Index(input[13:], "*")
		if infoEnd == -1 {
			return nil, fmt.Errorf("Kerberos 13100: could not locate end separator of user information")
		}

		return append(
			parent,
			[]tokenizer.Token{
				{
					Length:     infoEnd + 3, // + 2 for the asterisk on each end plus the $
					Attributes: tokenizer.FixedLength,
				},
				{
					Separator:  "$",
					LengthMin:  32,
					LengthMax:  32,
					Attributes: tokenizer.VerifyLength | tokenizer.VerifyHex,
				},
				{
					Separator:  "$",
					LengthMin:  64,
					LengthMax:  40960,
					Attributes: tokenizer.VerifyLength | tokenizer.VerifyHex,
				},
			}...,
		), nil
	}

	return append(
		parent,
		[]tokenizer.Token{
			{
				Separator:  "$",
				LengthMin:  32,
				LengthMax:  32,
				Attributes: tokenizer.VerifyLength | tokenizer.VerifyHex,
			},
			{
				Separator:  "$",
				LengthMin:  64,
				LengthMax:  40960,
				Attributes: tokenizer.VerifyLength | tokenizer.VerifyHex,
			},
		}...,
	), nil
}
